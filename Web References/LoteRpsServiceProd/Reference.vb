'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.237
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.237.
'
Namespace LoteRpsServiceProd
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LoteRpsSoapBinding", [Namespace]:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
    Partial Public Class LoteRpsService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private consultarSequencialRpsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private enviarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private consultarLoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private consultarNotaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private consultarNFSeRpsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.integradorNFSe.My.MySettings.Default.integradorNFSe_LoteRpsServiceProd_LoteRpsService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event consultarSequencialRpsCompleted As consultarSequencialRpsCompletedEventHandler
        
        '''<remarks/>
        Public Event enviarCompleted As enviarCompletedEventHandler
        
        '''<remarks/>
        Public Event consultarLoteCompleted As consultarLoteCompletedEventHandler
        
        '''<remarks/>
        Public Event consultarNotaCompleted As consultarNotaCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelarCompleted As cancelarCompletedEventHandler
        
        '''<remarks/>
        Public Event consultarNFSeRpsCompleted As consultarNFSeRpsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function consultarSequencialRps(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("consultarSequencialRpsReturn")> String
            Dim results() As Object = Me.Invoke("consultarSequencialRps", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consultarSequencialRpsAsync(ByVal mensagemXml As String)
            Me.consultarSequencialRpsAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consultarSequencialRpsAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.consultarSequencialRpsOperationCompleted Is Nothing) Then
                Me.consultarSequencialRpsOperationCompleted = AddressOf Me.OnconsultarSequencialRpsOperationCompleted
            End If
            Me.InvokeAsync("consultarSequencialRps", New Object() {mensagemXml}, Me.consultarSequencialRpsOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsultarSequencialRpsOperationCompleted(ByVal arg As Object)
            If (Not (Me.consultarSequencialRpsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consultarSequencialRpsCompleted(Me, New consultarSequencialRpsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function enviar(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("enviarReturn")> String
            Dim results() As Object = Me.Invoke("enviar", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub enviarAsync(ByVal mensagemXml As String)
            Me.enviarAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub enviarAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.enviarOperationCompleted Is Nothing) Then
                Me.enviarOperationCompleted = AddressOf Me.OnenviarOperationCompleted
            End If
            Me.InvokeAsync("enviar", New Object() {mensagemXml}, Me.enviarOperationCompleted, userState)
        End Sub
        
        Private Sub OnenviarOperationCompleted(ByVal arg As Object)
            If (Not (Me.enviarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent enviarCompleted(Me, New enviarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function consultarLote(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("consultarLoteReturn")> String
            Dim results() As Object = Me.Invoke("consultarLote", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consultarLoteAsync(ByVal mensagemXml As String)
            Me.consultarLoteAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consultarLoteAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.consultarLoteOperationCompleted Is Nothing) Then
                Me.consultarLoteOperationCompleted = AddressOf Me.OnconsultarLoteOperationCompleted
            End If
            Me.InvokeAsync("consultarLote", New Object() {mensagemXml}, Me.consultarLoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsultarLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.consultarLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consultarLoteCompleted(Me, New consultarLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function consultarNota(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("consultarNotaReturn")> String
            Dim results() As Object = Me.Invoke("consultarNota", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consultarNotaAsync(ByVal mensagemXml As String)
            Me.consultarNotaAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consultarNotaAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.consultarNotaOperationCompleted Is Nothing) Then
                Me.consultarNotaOperationCompleted = AddressOf Me.OnconsultarNotaOperationCompleted
            End If
            Me.InvokeAsync("consultarNota", New Object() {mensagemXml}, Me.consultarNotaOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsultarNotaOperationCompleted(ByVal arg As Object)
            If (Not (Me.consultarNotaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consultarNotaCompleted(Me, New consultarNotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function cancelar(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("cancelarReturn")> String
            Dim results() As Object = Me.Invoke("cancelar", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelarAsync(ByVal mensagemXml As String)
            Me.cancelarAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelarAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.cancelarOperationCompleted Is Nothing) Then
                Me.cancelarOperationCompleted = AddressOf Me.OncancelarOperationCompleted
            End If
            Me.InvokeAsync("cancelar", New Object() {mensagemXml}, Me.cancelarOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelarOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelarCompleted(Me, New cancelarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://wsnfe2.dsfnet.com.br", ResponseNamespace:="http://www.issdigitalsod.com.br/WsNFe2/LoteRps.jws")>  _
        Public Function consultarNFSeRps(ByVal mensagemXml As String) As <System.Xml.Serialization.SoapElementAttribute("consultarNFSeRpsReturn")> String
            Dim results() As Object = Me.Invoke("consultarNFSeRps", New Object() {mensagemXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consultarNFSeRpsAsync(ByVal mensagemXml As String)
            Me.consultarNFSeRpsAsync(mensagemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consultarNFSeRpsAsync(ByVal mensagemXml As String, ByVal userState As Object)
            If (Me.consultarNFSeRpsOperationCompleted Is Nothing) Then
                Me.consultarNFSeRpsOperationCompleted = AddressOf Me.OnconsultarNFSeRpsOperationCompleted
            End If
            Me.InvokeAsync("consultarNFSeRps", New Object() {mensagemXml}, Me.consultarNFSeRpsOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsultarNFSeRpsOperationCompleted(ByVal arg As Object)
            If (Not (Me.consultarNFSeRpsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consultarNFSeRpsCompleted(Me, New consultarNFSeRpsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub consultarSequencialRpsCompletedEventHandler(ByVal sender As Object, ByVal e As consultarSequencialRpsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consultarSequencialRpsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub enviarCompletedEventHandler(ByVal sender As Object, ByVal e As enviarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class enviarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub consultarLoteCompletedEventHandler(ByVal sender As Object, ByVal e As consultarLoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consultarLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub consultarNotaCompletedEventHandler(ByVal sender As Object, ByVal e As consultarNotaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consultarNotaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub cancelarCompletedEventHandler(ByVal sender As Object, ByVal e As cancelarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub consultarNFSeRpsCompletedEventHandler(ByVal sender As Object, ByVal e As consultarNFSeRpsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consultarNFSeRpsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
